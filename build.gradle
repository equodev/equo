allprojects {

    apply plugin: "java"
    apply plugin: "jacoco"
    
    
    repositories {
        jcenter()
    }
    
    jacoco {
        toolVersion = '0.8.6'
    }
      
}


def enabledHtml = hasProperty('reportHtml') ? reportHtml : "false"

project(":com.equo.p2repo") {
    task index(type: aQute.bnd.gradle.Index) {
        tasks.named("run.p2").get().finalizedBy index
        destinationDirectory = file("${bnd.build}/release/")
        repositoryName = "equo.${rootProject.name}"
        gzip = true
        bundles = fileTree(destinationDirectory.file("plugins")) {
            include '**/*.jar'
            exclude '**/*-sources.jar'
            exclude '**/*-javadoc.jar'
        }
        doLast {
            def props = new Properties()
            props.setProperty("version", "1")
            props.setProperty("metadata.repository.factory.order", "content.xml,!")
            props.setProperty("artifact.repository.factory.order", "artifacts.xml,!")
            file(destinationDirectory.file("p2.index")).withWriter { props.store(it, "Generated for v${version}") }
        }
    }
}

/* Additional configuration for the Bnd projects */
subprojects {
	
  	
  if (plugins.hasPlugin('biz.aQute.bnd')) {
    // additional configuration for Bnd projects
  }
  
  //jacoco configuration for every subproyect
  jacocoTestReport {
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = false
            xml.enabled = false
            csv.enabled = false
        }
    }
    
}


//taks to build jacoco report with results of all subprojects
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    //dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = Boolean.valueOf(enabledHtml)
        xml.enabled = false
        csv.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}


equo {
    if (System.getProperty('deployingProd', '').equals("true")) {
        channel = version
    } else {
        channel = "develop"
    }
}

task generateEquoAppToUpload(type: Copy){
    from 'cnf/equoapp.bnd'
    into '/tmp/auxequoapp'
    filter { line -> line.replaceAll('-include: ', "-include: https://equo-framework.ams3.digitaloceanspaces.com/${equo.channel}/") }
    filter { line -> line.replaceAll('file:\\$\\{\\.\\}', "https://equo-framework.ams3.digitaloceanspaces.com/${equo.channel}") }
}

task replaceVersionOnEquoBuild(type: Copy){
    from 'cnf/equobuild.bnd'
    into '/tmp/auxequobuild'
    filter { line -> line.replaceAll('VERSIONPLACEHOLDER', "${equo.channel}") }
}

task uploadEquoApp(type: com.equo.UploadFileTask, dependsOn: generateEquoAppToUpload) {
    key "${equo.channel}/equoapp.bnd"
    file file('/tmp/auxequoapp/equoapp.bnd')
}

task uploadEquoBuild(type: com.equo.UploadFileTask, dependsOn: replaceVersionOnEquoBuild) {
    key "${equo.channel}/equobuild.bnd"
    file file('/tmp/auxequobuild/equobuild.bnd')
}

task uploadEquoCore(type: com.equo.UploadFileTask) {
    key "${equo.channel}/ext/equocore.bnd"
    file file('cnf/ext/equocore.bnd')
}

task uploadFrameworkBnd(type: com.equo.UploadFileTask) {
    key "${equo.channel}/framework.bnd"
    file file('cnf/ext/framework.bnd')
}

task uploadLogback(type: com.equo.UploadFileTask) {
    key "${equo.channel}/logback.xml"
    file file('cnf/logback.xml')
}

task uploadEquoCi(type: com.equo.UploadFileTask) {
    key "${equo.channel}/equoci.yml"
    file file('cnf/equoci.yml')
}

task uploadEquoAppSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoApp.setup"
    file file('cnf/EquoApp.setup')
}

task uploadEquoIDEAppConfigSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoIDEAppConfig.setup"
    file file('cnf/EquoIDEAppConfig.setup')
}

task uploadEquoOrgProjectsSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoOrgProjects.setup"
    file file('cnf/EquoOrgProjects.setup')
}

task uploadEquoOwnerAppSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoOwnerApp.setup"
    file file('cnf/EquoOwnerApp.setup')
}

task uploadEquoFrameworkSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoFramework.setup"
    file file('cnf/EquoFramework.setup')
}

task uploadEquoFrameworkConfigSetup(type: com.equo.UploadFileTask) {
    key "${setupsChannel}/EquoFrameworkConfig.setup"
    file file('cnf/EquoFrameworkConfig.setup')
}

task uploadMetadata(type: com.equo.UploadMetadataTask) {
}

task publish(type: com.equo.UploadRepoTask, dependsOn: [uploadFrameworkBnd, uploadEquoApp, uploadEquoBuild, uploadEquoCore, uploadLogback, uploadEquoCi, uploadEquoAppSetup, uploadEquoIDEAppConfigSetup, uploadEquoOrgProjectsSetup, uploadEquoOwnerAppSetup, uploadEquoFrameworkSetup, uploadEquoFrameworkConfigSetup, uploadMetadata]) {
}

allprojects {

    apply plugin: "java"
    apply plugin: "jacoco"
    
    
    repositories {
        jcenter()
    }
    
    jacoco {
        toolVersion = '0.8.6'
    }
      
}


def enabledHtml = hasProperty('reportHtml') ? reportHtml : "false"

/* Additional configuration for the Bnd projects */
subprojects {
	
  	
  if (plugins.hasPlugin('biz.aQute.bnd')) {
    // additional configuration for Bnd projects
  }
  
  //jacoco configuration for every subproyect
  jacocoTestReport {
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = false
            xml.enabled = false
            csv.enabled = false
        }
    }
    
}


//taks to build jacoco report with results of all subprojects
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    //dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = Boolean.valueOf(enabledHtml)
        xml.enabled = false
        csv.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

